;; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

Caught exception in PickAndPlace::baseOnEnter(): Outgoing.cpp:493: Ice::UnknownException:
unknown exception:
std::exception:
Reason: Not all required inputparameters of the state 'PickAndPlace' are set:
	Required parameter 'CloseHandShapeName' was not set.
	Required parameter 'ForceThreshold' was not set.
	Required parameter 'GraspName' was not set.
	Required parameter 'GraspPreposeName' was not set.
	Required parameter 'GraspSetName' was not set.
	Required parameter 'HandNameInMemory' was not set.
	Required parameter 'HandNameInRobotModel' was not set.
	Required parameter 'KinematicChainName' was not set.
	Required parameter 'ObjectName' was not set.
	Required parameter 'OpenHandShapeName' was not set.
	Required parameter 'OrientationalAccuracyRadGrasp' was not set.
	Required parameter 'OrientationalAccuracyRadGraspPrepose' was not set.
	Required parameter 'OrientationalAccuracyRadLiftHand' was not set.
	Required parameter 'OrientationalAccuracyRadPlatform' was not set.
	Required parameter 'PosFinal' was not set.
	Required parameter 'PosPick' was not set.
	Required parameter 'PosPlace' was not set.
	Required parameter 'PositionalAccuracyGrasp' was not set.
	Required parameter 'PositionalAccuracyGraspPrepose' was not set.
	Required parameter 'PositionalAccuracyLiftHand' was not set.
	Required parameter 'PositionalAccuracyPlatform' was not set.
	Required parameter 'TcpTargetPose' was not set.
	Required parameter 'TimeToMove' was not set.
	Required parameter 'TimeToWait' was not set.
	Required parameter 'TorqueThreshold' was not set.

Backtrace:
1       0x7f77fc09434e armarx::StateController::enter(std::map<std::string, IceInternal::Handle<armarx::VariantContainerBase>, std::less<std::string>, std::allocator<std::pair<std::string const, IceInternal::Handle<armarx::VariantContainerBase> > > > const&) + 1784
2       0x7f77e44e1177 armarx::RemoteStateOfferer<armarx::PickAndPlaceGroup::PickAndPlaceGroupStatechartContext>::callRemoteState(int, std::map<std::string, IceInternal::Handle<armarx::VariantContainerBase>, std::less<std::string>, std::allocator<std::pair<std::string const, IceInternal::Handle<armarx::VariantContainerBase> > > > const&, Ice::Current const&) + 223
3       0x7f77fce6f3b9 armarx::RemoteStateOffererInterface::___callRemoteState(IceInternal::Incoming&, Ice::Current const&) + 163
4       0x7f77fce712b3 armarx::RemoteStateOffererIceBase::__dispatch(IceInternal::Incoming&, Ice::Current const&) + 383
5       0x7f77fdecdcf4 IceInternal::Incoming::invoke(IceInternal::Handle<IceInternal::ServantManager> const&, IceInternal::BasicStream*) + 2420
6       0x7f77fdea6803 Ice::ConnectionI::invokeAll(IceInternal::BasicStream&, int, int, unsigned char, IceInternal::Handle<IceInternal::ServantManager> const&, IceInternal::Handle<Ice::ObjectAdapter> const&) + 195
7       0x7f77fdea6b98 Ice::ConnectionI::dispatch(IceUtil::Handle<Ice::ConnectionI::StartCallback> const&, std::vector<Ice::ConnectionI::SentCallback, std::allocator<Ice::ConnectionI::SentCallback> > const&, unsigned char, int, int, IceInternal::Handle<IceInternal::ServantManager> const&, IceInternal::Handle<Ice::ObjectAdapter> const&, IceInternal::Handle<IceInternal::OutgoingAsync> const&, IceInternal::BasicStream&) + 296
8       0x7f77fdea86e9 Ice::ConnectionI::message(IceInternal::ThreadPoolCurrent&) + 3369
9       0x7f77fdfe2abc IceInternal::ThreadPool::run(IceUtil::Handle<IceInternal::ThreadPool::EventHandlerThread> const&) + 204
10      0x7f77fdfe3492 IceInternal::ThreadPool::EventHandlerThread::run() + 98
11      0x7f77fdb0da6d /usr/lib/x86_64-linux-gnu/libIceUtil.so.35(+0x2ba6d) [0x7f77fdb0da6d]
12      0x7f77fbb61182 /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f77fbb61182]
13      0x7f77fb17047d clone + 109


  0 IceUtil::Exception::Exception(char const*, int) in /usr/lib/x86_64-linux-gnu/libIceUtil.so.35
  1 Ice::LocalException::LocalException(char const*, int) in /usr/lib/x86_64-linux-gnu/libIce.so.35
  2 Ice::UnknownException::UnknownException(char const*, int) in /usr/lib/x86_64-linux-gnu/libIce.so.35
  3 IceInternal::Outgoing::finished(IceInternal::BasicStream&) in /usr/lib/x86_64-linux-gnu/libIce.so.35
  4 Ice::ConnectionI::parseMessage(IceInternal::BasicStream&, int&, int&, unsigned char&, IceInternal::Handle<IceInternal::ServantManager>&, IceInternal::Handle<Ice::ObjectAdapter>&, IceInternal::Handle<IceInternal::OutgoingAsync>&) in /usr/lib/x86_64-linux-gnu/libIce.so.35
  5 Ice::ConnectionI::message(IceInternal::ThreadPoolCurrent&) in /usr/lib/x86_64-linux-gnu/libIce.so.35
  6 IceInternal::ThreadPool::run(IceUtil::Handle<IceInternal::ThreadPool::EventHandlerThread> const&) in /usr/lib/x86_64-linux-gnu/libIce.so.35
  7 IceInternal::ThreadPool::EventHandlerThread::run() in /usr/lib/x86_64-linux-gnu/libIce.so.35
  8 /usr/lib/x86_64-linux-gnu/libIceUtil.so.35(+0x2ba6d) [0x7f6cf38e2a6d]
  9 /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f6cf0fc6182]
 10 clone() in /lib/x86_64-linux-gnu/libc.so.6
Backtrace:
1       0x7f6cf1b9d9d5 armarx::LogSender::log(armarx::MessageType, std::string const&) + 1653
2       0x7f6cf1b9de86 armarx::LogSender::flush() + 64
3       0x7f6cf1b9eebd armarx::LogSender& armarx::LogSender::operator<< <void (armarx::LogSender::*)()>(void (armarx::LogSender::* const&)()) + 101
4       0x7f6cf282e42c armarx::RemoteState::_baseOnEnter() + 4846
5       0x7f6cf2837bf5 armarx::DynamicRemoteState::_baseOnEnter() + 861
6       0x7f6cf278c5a0 armarx::StateController::__processEvent(IceInternal::Handle<armarx::Event>, bool) + 3924
7       0x7f6cf27ef5b3 armarx::StatechartManager::processEvents() + 231
8       0x7f6cf27f2284 armarx::RunningTask<armarx::StatechartManager>::run() + 284
9       0x7f6cf38e2a6d /usr/lib/x86_64-linux-gnu/libIceUtil.so.35(+0x2ba6d) [0x7f6cf38e2a6d]
10      0x7f6cf0fc6182 /lib/x86_64-linux-gnu/libpthread.so.0(+0x8182) [0x7f6cf0fc6182]
11      0x7f6cf05d547d clone + 109
